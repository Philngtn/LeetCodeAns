// Given a string s, return the longest palindromic substring in s.
// Example 1:
// Input: s = "babad"
// Output: "bab"
// Note: "aba" is also a valid answer.

// Example 2:
// Input: s = "cbbd"
// Output: "bb"

// Example 3:
// Input: s = "a"
// Output: "a"

// Example 4:
// Input: s = "ac"
// Output: "a"
 
// Constraints:

// 1 <= s.length <= 1000
// s consist of only digits and English letters (lower-case and/or upper-case),

// 1st Approach 20ms

class Solution {
public:
    string longestPalindrome(string s) {
        if (s.size() < 1) return "";
        
        int start=0;
        int len = 0;
        for (int i = 0; i < s.size(); i++){
            
            int len1 = expandFromMid(s, i, i+1);
            int len2 = expandFromMid(s, i, i);
            
            if (len < max(len1,len2)){
                len = max(len1,len2);
                start = i - ((len - 1)/2);
            }
        }
        
        return s.substr(start, len);
        
    }
                      // Pass by ref x4 speed
    int expandFromMid(string &s, int left, int right){
        
        if (s.size() < 0 || left > right) return 0;
        
        while(left >= 0 && right < s.size() && s[left] == s[right]){
            left--;
            right++;        
        }
        
        return right - left - 1;
        
    }
    
};

// 2nd Approach 4ms

class Solution {
public:
    string longestPalindrome(string s) 
    {
        int i = 0, l, j, k, len = 1, st = 0, e = 0; 
        int n = s.size();
        
        while(i<n){
            k = i;
            
            while(k < n-1 && s[k]==s[k+1])
                k++;
            
            j = i;
            i = k+1;
            
            while(j > 0  &&  k<n-1 && s[j-1]==s[k+1] ){
                j--;
                k++;
            }
            
            l = k-j+1; 
            // 3
            if(l>len) {
                len = l;
                st = j;
                e = k;
            }
        }
        
        return s.substr(st, len);
        
    }
};
